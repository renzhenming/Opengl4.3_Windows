#version 430

in vec3 varyingNormal;
in vec3 varyingLightDir;
in vec3 varyingVertPos;

in vec3 originalVertex;

out vec4 fragColor;

struct PositionalLight{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 position;
};
struct Material {
 vec4 ambient;
 vec4 diffuse;
 vec4 specular;
 float shininess;
};

uniform vec4 globalAmbient;
uniform PositionalLight light;
uniform Material material;
uniform mat4 mv_matrix;
uniform mat4 proj_matrix;
uniform mat4 norm_matrix;

void main(void){
    // normalize the light, normal, and view vectors:
	vec3 L = normalize(varyingLightDir);
	vec3 N = normalize(varyingNormal);
	//计算从顶点到观察点的方向向量（通常观察点在原点，所以取负的 varyingVertPos），
	//并进行归一化处理，得到单位向量 V。
	vec3 V = normalize(-varyingVertPos);

	float a = 0.15; 	// controls depth of bumps
	float b = 50.0; // controls width of bumps
	float x = originalVertex.x;
	float y = originalVertex.y;
	float z = originalVertex.z;
	N.x = varyingNormal.x + a*sin(b*x);
	N.y = varyingNormal.y + a*sin(b*y);
	N.z = varyingNormal.z + a*sin(b*z);
	N = normalize(N);

	//l是点到光源的方向向量,-l就是光源到点的方向向量
	//计算光线 L 关于法线 N 的反射向量 R，并进行归一化处理。
	vec3 R = normalize(reflect(-L,N));
	//计算光线方向向量 L 和法线向量 N 的点积，
	//得到它们之间夹角的余弦值 cosTheta，用于计算漫反射光照强度。
	float cosTheta = dot(L,N);
	//计算观察方向向量 V 和反射向量 R 的点积，
	//得到它们之间夹角的余弦值 cosPhi，用于计算镜面反射光照强度
	float cosPhi = dot(V,R);

	fragColor = globalAmbient * material.ambient 
	+ light.ambient * material.ambient
	+ light.diffuse * material.diffuse * max(cosTheta,0.0)
	+ light.specular * material.specular * pow(max(cosPhi,0.0),material.shininess);
}