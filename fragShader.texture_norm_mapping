#version 430

in vec3 varyingLightDir;
in vec3 varyingVertPos;
in vec3 varyingNormal;
in vec3 varyingTangent;
in vec3 originalVertex;
in vec2 tc;

out vec4 fragColor;

layout(binding = 0) uniform sampler2D s;
layout(binding = 1) uniform sampler2D t;

struct PositionalLight{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 position;
};

struct Material{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shininess;
};

uniform vec4 globalAmbient;
uniform PositionalLight light;
uniform Material material;
uniform mat4 mv_matrix;
uniform mat4 proj_matrix;
uniform mat4 norm_matrix;

vec3 calcNewNormal() {
	vec3 normal = normalize(varyingNormal);
	vec3 tangent = normalize(varyingTangent);
	tangent = normalize(tangent - dot(tangent, normal) * normal);
	vec3 bitangent = cross(tangent, normal);
	mat3  tbn = mat3(tangent,bitangent,normal);
	vec3 retrievedNormal = texture(s,tc).xyz;
	retrievedNormal = retrievedNormal * 2.0 - 1.0;
	vec3 newNormal = tbn * retrievedNormal;
	newNormal = normalize(newNormal);
	return newNormal;
}


void main(void){
	//视线方向向量
	vec3 V = normalize(-varyingLightDir);

	//计算漫反射强度
	vec3 L = normalize(varyingLightDir);
	vec3 N = calcNewNormal();
	float cosTheta = dot(L,N);

	//计算反射向量
	vec3 R = normalize(reflect(-L,N));
	//计算镜面反射强度
	float cosPhi = dot(V,R);

	vec4 texC = texture(t,tc);
	fragColor = globalAmbient * light.ambient * texC
	+ light.diffuse * texC * max(0.0, cosTheta);
	+ light.specular * texC * pow(max(0.0, cosPhi) ,material.shininess);

	//不用法线贴图
	//fragColor = texC;
}